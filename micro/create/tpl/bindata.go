// Code generated by go-bindata.
// sources:
// .gitignore
// README.md
// __tp-micro__gen__.lock
// api/handler.go
// api/router.go
// args/const.go
// args/type.go
// args/var.go
// doc/APIDoc.md
// doc/README.md
// doc/数据库设计.md
// rerrs/rerrs.go
// sdk/rpc.go
// sdk/rpc_test.go
// DO NOT EDIT!

package tpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"os"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _Gitignore = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\x4f\x4b\xc4\x30\x10\xc5\xef\xef\xa3\x0c\x38\xa0\xa0\x78\xf5\xe0\x45\xf0\x0f\x5e\x45\x42\x9b\x4e\x63\xd7\x6d\x67\x4c\xd2\xb5\xee\x52\x3f\xbb\xc4\x54\xf0\xf2\x92\xf7\x63\xf8\xcd\x10\x2b\x88\x1b\x10\x27\x85\xd3\x76\x07\x97\x25\x65\x10\xbf\x5c\x5e\x5d\x1f\x3e\x5e\xb1\xbd\xac\x73\xa1\x3e\xe8\x39\x07\xad\xbf\x0b\xf6\x70\x3e\xa8\xeb\xa4\x9f\xa7\xbf\x12\x34\x7f\x99\xa4\x32\xf5\xdb\x65\x31\x8d\x99\xa9\x9a\xc7\x66\x98\xaa\x40\x16\xa9\xf9\x0d\xe2\x6d\xa9\x45\xed\x41\x1c\x9b\x08\xe2\xe3\x60\x20\x0e\xc7\xc2\x53\x07\xe2\x76\x2c\xe9\xfb\x50\x88\xe5\x05\xc4\x7b\x0d\xa0\x49\xdf\x66\xdb\x0e\x3c\x24\xaf\x5d\x11\xa7\xb9\xdd\x0f\xa3\x9c\x59\xd4\x9d\xf8\xfc\x8f\x7c\x6a\x7c\x4f\xd6\x78\xc1\xe9\xf4\xf4\xfc\x78\xe7\x1e\x6e\xee\x6f\xd7\x15\x3f\x01\x00\x00\xff\xff\x78\x2c\x45\x8a\x0c\x01\x00\x00")

func GitignoreBytes() ([]byte, error) {
	return bindataRead(
		_Gitignore,
		".gitignore",
	)
}

func Gitignore() (*asset, error) {
	bytes, err := GitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".gitignore", size: 268, mode: os.FileMode(420), modTime: time.Unix(1564192672, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _readmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcf\xbf\x4e\x33\x31\x10\x04\xf0\xde\x4f\x31\x9f\x52\x7c\x70\xd2\x9d\x81\x32\x1d\x42\xd0\xf1\x57\xe9\x10\x85\xe3\x6c\xb0\x89\xed\xb5\xd6\xeb\x84\x7b\x7b\x74\x20\x2a\xda\xd1\xe8\xa7\x99\x15\x6e\x38\x67\x57\x76\xc8\xd1\x0b\x1b\x73\x8d\x1d\xd5\xc4\x73\xa6\xa2\x50\xe6\xd4\xb0\x67\xc1\xeb\xe6\x69\xbc\x5f\x1a\x6f\x67\x41\xb5\xb6\xb5\xb5\xef\x51\x43\xdf\x4e\x9e\xb3\xfd\x8c\x8e\xa9\xb8\x68\xb5\x8e\xdf\x8e\x55\x21\xb2\xc7\xab\xe9\x72\xba\x38\xff\xa1\xd1\x48\x8e\xd1\x13\xf6\xe2\x32\x9d\x58\x0e\x93\x31\xab\x15\xee\xc8\x69\x17\x32\x66\xc4\x73\x8f\xfe\x90\x66\x78\x21\xa7\x04\x87\x5f\x0e\x55\xf8\x83\xbc\x9a\x11\x2f\xbd\xfc\x89\x71\x8a\x1a\x10\x58\xe1\x39\xd7\x98\x9c\x46\x2e\xc6\x0c\xc3\xc3\xe3\xe6\x76\x3d\x0c\xd8\x04\x82\xce\x95\xc0\x7b\x04\x57\x76\x89\xe4\x7f\x43\x75\xcb\x12\x25\xc1\xf2\x5f\xa8\xf5\xa4\xc8\xbd\x29\xb6\x84\xa6\xd2\xbd\xfe\x33\x5f\x01\x00\x00\xff\xff\xe1\x3c\xda\x59\x21\x01\x00\x00")

func readmeMdBytes() ([]byte, error) {
	return bindataRead(
		_readmeMd,
		"README.md",
	)
}

func readmeMd() (*asset, error) {
	bytes, err := readmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "README.md", size: 289, mode: os.FileMode(420), modTime: time.Unix(1564200462, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var ___tpMicro__gen__Lock = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xca\xc1\x0d\x82\x21\x0c\x06\xd0\xbb\x53\x7c\x32\x00\x03\x78\xf7\xaa\x17\x06\xc0\x60\x0b\x4d\xa0\x4d\x28\x2a\x6e\x6f\xfc\xaf\x2f\xef\x76\x4f\xd7\xcb\x09\xa9\x89\x23\x0f\x29\xd3\x50\x49\x33\x8a\x8d\xf1\xd0\x27\x4c\xfb\x17\xc5\xde\x34\x1d\x2c\x9d\x1c\x1f\x59\x0d\xab\x11\x42\xac\xa4\xb1\x5a\x80\xbf\x98\x65\x43\xf8\xf0\x7f\x03\x6d\xf1\xe5\xe7\x5f\x00\x00\x00\xff\xff\x83\x15\xc3\x44\x5f\x00\x00\x00")

func __tpMicro__gen__LockBytes() ([]byte, error) {
	return bindataRead(
		___tpMicro__gen__Lock,
		"__tp-micro__gen__.lock",
	)
}

func __tpMicro__gen__Lock() (*asset, error) {
	bytes, err := __tpMicro__gen__LockBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "__tp-micro__gen__.lock", size: 95, mode: os.FileMode(420), modTime: time.Unix(1564192672, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _apiHandlerGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x48\x2c\xc8\xe4\x02\x04\x00\x00\xff\xff\x0c\x0c\x0a\x62\x0c\x00\x00\x00")

func apiHandlerGoBytes() ([]byte, error) {
	return bindataRead(
		_apiHandlerGo,
		"api/handler.go",
	)
}

func apiHandlerGo() (*asset, error) {
	bytes, err := apiHandlerGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api/handler.go", size: 12, mode: os.FileMode(420), modTime: time.Unix(1564192672, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _apiRouterGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8b\x41\x0e\x02\x21\x0c\x45\xd7\xf6\x14\xcd\xac\x66\x5c\x0c\x89\x47\xf1\x06\x88\x15\x88\x40\x9b\x52\x16\xc6\x78\x77\x83\xba\x70\xf9\xdf\x7f\x4f\x7c\xb8\xfb\x48\xe8\x25\x03\xe4\x2a\xac\x86\x2b\x1c\x4c\x70\x89\xd9\xd2\xb8\xec\x81\xab\x4b\xd4\xf4\x51\x88\x4e\xa1\x39\xa3\x42\x53\x5b\x60\x03\x70\x0e\xc3\xe8\xc6\xf5\xcc\xc3\x08\x95\x62\xee\x46\xda\x7f\x14\x93\x6f\xd7\x32\xb7\x31\xea\x54\x74\x87\xdb\x68\xe1\xbf\x5a\xbf\x07\x1e\x4d\xf6\x0f\xd0\x0d\x9f\xf0\x82\x77\x00\x00\x00\xff\xff\xd3\xb5\x7a\x55\x9b\x00\x00\x00")

func apiRouterGoBytes() ([]byte, error) {
	return bindataRead(
		_apiRouterGo,
		"api/router.go",
	)
}

func apiRouterGo() (*asset, error) {
	bytes, err := apiRouterGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api/router.go", size: 155, mode: os.FileMode(420), modTime: time.Unix(1564192672, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _argsConstGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x48\x2c\x4a\x2f\xe6\xe2\x4a\xce\xcf\x2b\x2e\x51\xd0\xd0\xe4\x02\x04\x00\x00\xff\xff\xf5\x9a\x10\x2f\x17\x00\x00\x00")

func argsConstGoBytes() ([]byte, error) {
	return bindataRead(
		_argsConstGo,
		"args/const.go",
	)
}

func argsConstGo() (*asset, error) {
	bytes, err := argsConstGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "args/const.go", size: 23, mode: os.FileMode(420), modTime: time.Unix(1564192672, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _argsTypeGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x48\x2c\x4a\x2f\xe6\xe2\x2a\xa9\x2c\x48\x55\xd0\xd0\xe4\x02\x04\x00\x00\xff\xff\x61\x1b\x80\x25\x16\x00\x00\x00")

func argsTypeGoBytes() ([]byte, error) {
	return bindataRead(
		_argsTypeGo,
		"args/type.go",
	)
}

func argsTypeGo() (*asset, error) {
	bytes, err := argsTypeGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "args/type.go", size: 22, mode: os.FileMode(420), modTime: time.Unix(1564192672, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _argsVarGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x48\x2c\x4a\x2f\xe6\xe2\x2a\x4b\x2c\x52\xd0\xd0\xe4\x02\x04\x00\x00\xff\xff\xa5\xca\xdc\xfb\x15\x00\x00\x00")

func argsVarGoBytes() ([]byte, error) {
	return bindataRead(
		_argsVarGo,
		"args/var.go",
	)
}

func argsVarGo() (*asset, error) {
	bytes, err := argsVarGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "args/var.go", size: 21, mode: os.FileMode(420), modTime: time.Unix(1564192672, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _docApidocMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x51\x51\x6b\xd3\x50\x18\x7d\xff\x7e\xc5\x21\x7d\x0b\xde\x85\xce\x17\xa9\xf8\x24\xe2\x8b\x4f\x32\x9f\xd7\xd8\x66\x6d\x64\x4d\x42\x9b\x49\x86\x77\xd0\x8d\x0d\x1d\x65\x4d\xc1\x59\x6b\xd5\x41\x51\xe7\x40\x30\x0e\x26\x65\xb3\x2c\x7f\x66\xf7\x36\x7d\xda\x5f\x90\x9b\xa4\x5b\xdf\x76\x21\x90\xf3\xdd\xef\x3b\xdf\x39\xe7\xa2\x80\xe9\xe1\x89\x7c\x37\x96\x27\x23\xf1\xf5\x23\x11\x0a\x05\x14\x97\x8a\x98\xb5\x87\x49\xfc\x56\xfc\x7c\x2f\x7a\x07\x49\x77\x2c\xc2\x7e\xde\xd7\xfd\x21\xc2\x6f\x44\xba\x3e\xfd\xdd\x4e\x8e\xb7\x65\x18\x26\xf1\x9f\xeb\xc9\x50\xd7\x41\xc4\xb0\xd8\x9b\xfc\xdd\x95\xfd\x4f\x57\xf1\x48\x6e\x47\x6a\x22\x89\xc6\xf2\x74\xe7\xc5\xf3\x67\x79\x3b\x43\x19\x75\xdf\xf7\x4a\x86\x11\x04\xc1\x92\xfa\x2a\x6e\xc3\xd8\x68\x59\x4d\xe3\x75\xd1\xf0\x9a\xee\x9a\xbd\x6e\x19\x35\xcb\x5f\x7d\xb9\xb9\xea\x98\x0d\x8b\x80\x5b\x22\xd9\x3f\x17\x93\x30\xe5\x22\x86\xa7\x4f\x56\x14\xe3\x63\xd7\xf1\x2d\xc7\x67\x2b\x9b\x9e\x55\x82\xe9\x79\xeb\x76\xc5\xf4\x6d\xd7\x31\x5e\xb5\x5c\xe7\x61\xa5\x6e\x36\x5b\x96\xff\x68\xc3\x5f\x63\x0f\x14\x95\x08\x77\xe4\x87\x1b\xfd\x3c\x83\xa2\x77\xc0\x45\xbc\x37\x6b\xef\xf3\xe9\xe9\x3f\x71\xd4\xe1\x49\x74\x26\x07\x5d\x4e\xbc\xc4\x18\x63\x00\x90\xfe\x65\x90\x81\xb3\xbc\xcc\x89\x43\x09\x05\x87\x1c\x44\xe0\x2d\xbf\x69\x3b\x35\xf0\x3c\xe5\x2c\xcf\x74\x9c\x08\xf3\xed\xd3\xef\x17\x57\x97\x1d\x5d\x27\x2a\x97\xcb\x50\x3a\x09\x78\x43\x48\x8f\xa6\xe8\xb4\x12\xb4\x86\x5d\x69\xba\x1a\x01\x5b\xaa\x2d\x1d\x4f\xe2\x43\xf1\xf9\x28\x23\xc9\x14\x66\x2e\x80\x1b\x1f\xe0\x72\x10\x89\xde\xb1\x88\xf7\xc4\xe8\x97\x5a\x9c\xbd\x58\xae\x95\x2d\x1c\xdc\x01\x89\xc3\xae\xa6\x7c\x3c\x73\x63\x57\x55\xcd\xac\x59\x8b\x45\x71\x7e\x36\xbb\xdc\x55\x17\x5e\xdd\x75\xac\x85\x1b\xb9\xdf\x91\x5f\x2e\x44\x38\xe6\xe9\x1b\xa6\xda\xe7\xd6\xaf\x27\x43\x22\xdc\xda\xcf\xdd\x6b\x76\x55\x2b\xa1\xb8\x7c\xff\x5e\x8e\xcd\x9a\xca\x62\x79\x0e\xd3\x15\x2a\x9c\x20\x08\x02\x8d\xb0\x85\x8c\xe5\x7f\x00\x00\x00\xff\xff\x69\x55\x52\x40\xd7\x02\x00\x00")

func docApidocMdBytes() ([]byte, error) {
	return bindataRead(
		_docApidocMd,
		"doc/APIDoc.md",
	)
}

func docApidocMd() (*asset, error) {
	bytes, err := docApidocMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "doc/APIDoc.md", size: 727, mode: os.FileMode(420), modTime: time.Unix(1564201646, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _docReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\x56\x78\x36\xa7\xf7\x69\xd7\xc2\x17\xeb\xb7\x3c\x9b\xd1\xc7\xc5\x85\x10\x58\xde\xf2\xa2\xa7\x19\x2c\xf0\xb4\x75\xf3\x8b\xc6\x29\x10\x61\x88\x8a\xcd\x2b\x9e\xb5\xf4\x3f\xd9\xd5\xfd\x72\xe1\x4e\x2e\x2e\x40\x00\x00\x00\xff\xff\xed\xdc\x7d\x82\x44\x00\x00\x00")

func docReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_docReadmeMd,
		"doc/README.md",
	)
}

func docReadmeMd() (*asset, error) {
	bytes, err := docReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "doc/README.md", size: 68, mode: os.FileMode(420), modTime: time.Unix(1564201832, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _docMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\xdd\x6a\x1a\x41\x14\xc7\xef\xe7\x29\x0e\x78\xb1\x2e\x24\xc5\x2d\x0d\x14\x8a\x17\x1b\xdd\xb6\x52\x5d\x8b\x59\x03\xb9\x72\xd6\xec\xd6\x08\xba\x26\xba\x06\x0a\x73\xd1\x36\x2d\x35\x84\xd6\x42\x3f\x92\x12\x09\xb5\x08\x95\x50\x9a\x14\xa4\xa1\x5a\xda\x97\xe9\x8c\xfa\x16\x65\x76\xd5\x59\xd3\x36\x21\x73\x33\xc7\xe1\xfc\xfe\xe7\xc3\xfd\x87\x42\x90\x7a\xb8\xb2\x55\x42\x10\x0a\x81\x72\x4d\x81\xe1\x9b\x2e\x6b\x9c\xfd\xfe\xd5\x66\x8f\x4f\x46\xed\x6e\xb8\x5e\xb3\xab\x32\x22\x40\x9b\x4f\xd8\xdb\x53\x20\x30\x3a\xe9\xb1\x83\x97\x40\x60\xf8\x75\x40\x8f\xf6\x80\xc0\x78\x70\x30\xfa\xd2\xa1\x8f\x7e\xf0\xc7\xdd\x06\x6b\x7d\x06\x82\xc8\xa2\x77\x2e\xbc\x10\x81\xa2\xc5\x25\x9f\x1f\xd3\x8f\x47\x09\x8b\x00\xce\x17\x0b\x45\xc7\x0d\x5f\x8f\xc8\x18\x08\x2c\x02\x81\x55\x85\xab\x81\x63\x96\x6d\xae\xef\xb5\x47\x3f\xbd\xa6\xaf\x5e\x00\x01\xbc\x6d\x56\xd7\x37\xcc\xea\x14\x88\x08\xc0\x2c\x04\xf2\xbf\xf7\xc6\x3f\x9f\xf2\x7c\x2e\xae\xfc\x95\xbb\xb9\x51\x71\x44\x36\xdb\xdd\x63\xad\x3e\x6d\x9e\x05\x0b\x28\x4b\x1e\x24\x49\x53\x0a\x61\x8c\x6b\x5b\x25\x14\xcb\x68\xaa\xa1\x81\xa1\x2e\x27\x35\xc0\x7c\x5d\x18\xc2\x08\x00\x17\x2d\x0c\x62\x1c\xd0\xd3\x06\xe8\xd9\x64\x12\xd4\xac\x91\xce\x25\xf4\x58\x46\x4b\x69\xba\x01\xb1\x74\xca\xbb\xa5\xc9\x16\xe2\xd2\x02\xa7\xf9\xbc\x18\x02\xe3\x09\x81\xb8\x76\x5b\xcd\x26\x0d\x90\x22\x92\xa0\xfd\x95\xf8\xac\x59\xb0\x31\x4c\x26\xfd\x07\x16\xa4\xbc\xc5\xf8\x94\xb7\x04\x51\x52\x59\xba\x84\x9d\xad\xc9\xc7\xeb\x9b\x96\xe9\xda\x56\xce\x74\x67\x63\x2b\xca\x65\x5d\xb3\xc3\x1e\x7b\x77\xca\xf6\xbf\x8d\xf7\x7b\xbe\xcc\x7a\xd5\xbe\x50\x46\xb4\xde\x38\xa4\x83\x7e\x10\xb5\xec\x92\xcd\x51\xb7\x76\x85\x0e\x68\xe3\xc3\xf8\x7d\xc7\x97\x09\x47\x46\xed\xee\xb0\xd3\x67\xad\x63\xff\x59\xf6\x84\xef\x67\x12\x29\x35\xb3\x06\xf7\xb4\x35\x08\xf3\xbf\x55\x5e\x40\x32\x68\xfa\x9d\x84\xae\x45\x13\x8e\x53\x89\x2f\xcf\xb4\x63\x77\xd5\xcc\x8a\x66\x44\xeb\xee\x83\x9b\xe5\xfc\x8d\x69\x9d\xa8\x74\xce\x57\xd2\x2d\xef\x03\x42\x08\x71\x07\x56\x9c\x42\xc5\xca\x7b\xb1\xf0\x20\x7d\xb6\x33\x6f\xc3\x5c\xd9\x76\x4d\x19\x09\x33\x82\xb0\x23\x78\x3f\x26\x96\x14\xe7\x7f\xe6\x04\xdf\x81\x30\x0d\xe6\xc2\x73\x0f\x93\xc0\x37\xd5\xb6\xe9\x9a\x55\xe1\xab\x4e\x8f\xee\x34\xe7\x7d\x38\x35\xd7\xa4\xfe\xaa\xc2\x2f\x84\xfe\x04\x00\x00\xff\xff\x76\xa1\x37\x18\x69\x04\x00\x00")

func docMdBytes() ([]byte, error) {
	return bindataRead(
		_docMd,
		"doc/数据库设计.md",
	)
}

func docMd() (*asset, error) {
	bytes, err := docMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "doc/数据库设计.md", size: 1129, mode: os.FileMode(420), modTime: time.Unix(1564201767, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rerrsRerrsGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xca\xb1\xce\x82\x30\x10\x00\xe0\x99\x7b\x8a\x4b\x27\x48\x08\x2d\xff\xfe\x4f\x4e\x2e\xc6\xf0\x06\x27\x5e\xa0\x11\xda\x7a\x3d\x30\xbe\xbd\xc1\xa0\x93\xf3\xf7\x25\xea\x6f\x34\x30\x0a\x8b\x64\x00\x3f\xa7\x28\x8a\x25\x14\x9a\xd0\x0c\x5e\xc7\xe5\xd2\xf4\x71\xb6\x23\x07\x79\x4e\xcc\x7f\x7d\xb0\xca\x13\x6f\xcd\x40\x05\xb0\x92\x6c\xdd\x5a\xec\x58\xe4\x18\x56\x9a\xfc\xf5\x4c\x42\x33\x2b\x0b\xb2\x48\x14\x28\x7e\xda\x3f\x6a\x6a\x4e\xfc\xe8\xde\xa9\x6c\x9d\x73\xae\xad\xd1\xec\x11\xbf\xd3\xd4\x68\x0e\x31\x28\xf9\x90\xd1\xef\x2a\x7c\x5f\x38\x2b\xa6\xcf\xca\xa6\x82\x0a\x5e\x01\x00\x00\xff\xff\x8b\x81\xb9\xe7\xd1\x00\x00\x00")

func rerrsRerrsGoBytes() ([]byte, error) {
	return bindataRead(
		_rerrsRerrsGo,
		"rerrs/rerrs.go",
	)
}

func rerrsRerrsGo() (*asset, error) {
	bytes, err := rerrsRerrsGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rerrs/rerrs.go", size: 209, mode: os.FileMode(420), modTime: time.Unix(1564192672, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sdkRpcGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x28\x4e\xc9\xe6\x02\x04\x00\x00\xff\xff\x36\xfa\x03\xb1\x0c\x00\x00\x00")

func sdkRpcGoBytes() ([]byte, error) {
	return bindataRead(
		_sdkRpcGo,
		"sdk/rpc.go",
	)
}

func sdkRpcGo() (*asset, error) {
	bytes, err := sdkRpcGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sdk/rpc.go", size: 12, mode: os.FileMode(420), modTime: time.Unix(1564192672, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sdkRpc_testGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x28\x4e\xc9\xe6\x02\x04\x00\x00\xff\xff\x36\xfa\x03\xb1\x0c\x00\x00\x00")

func sdkRpc_testGoBytes() ([]byte, error) {
	return bindataRead(
		_sdkRpc_testGo,
		"sdk/rpc_test.go",
	)
}

func sdkRpc_testGo() (*asset, error) {
	bytes, err := sdkRpc_testGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sdk/rpc_test.go", size: 12, mode: os.FileMode(420), modTime: time.Unix(1564192672, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".gitignore":             Gitignore,
	"README.md":              readmeMd,
	"__tp-micro__gen__.lock": __tpMicro__gen__Lock,
	"api/handler.go":         apiHandlerGo,
	"api/router.go":          apiRouterGo,
	"args/const.go":          argsConstGo,
	"args/type.go":           argsTypeGo,
	"args/var.go":            argsVarGo,
	"doc/APIDoc.md":          docApidocMd,
	"doc/README.md":          docReadmeMd,
	"doc/数据库设计.md":           docMd,
	"rerrs/rerrs.go":         rerrsRerrsGo,
	"sdk/rpc.go":             sdkRpcGo,
	"sdk/rpc_test.go":        sdkRpc_testGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	".gitignore":             &bintree{Gitignore, map[string]*bintree{}},
	"README.md":              &bintree{readmeMd, map[string]*bintree{}},
	"__tp-micro__gen__.lock": &bintree{__tpMicro__gen__Lock, map[string]*bintree{}},
	"api": &bintree{nil, map[string]*bintree{
		"handler.go": &bintree{apiHandlerGo, map[string]*bintree{}},
		"router.go":  &bintree{apiRouterGo, map[string]*bintree{}},
	}},
	"args": &bintree{nil, map[string]*bintree{
		"const.go": &bintree{argsConstGo, map[string]*bintree{}},
		"type.go":  &bintree{argsTypeGo, map[string]*bintree{}},
		"var.go":   &bintree{argsVarGo, map[string]*bintree{}},
	}},
	"doc": &bintree{nil, map[string]*bintree{
		"APIDoc.md": &bintree{docApidocMd, map[string]*bintree{}},
		"README.md": &bintree{docReadmeMd, map[string]*bintree{}},
		"数据库设计.md":  &bintree{docMd, map[string]*bintree{}},
	}},
	"rerrs": &bintree{nil, map[string]*bintree{
		"rerrs.go": &bintree{rerrsRerrsGo, map[string]*bintree{}},
	}},
	"sdk": &bintree{nil, map[string]*bintree{
		"rpc.go":      &bintree{sdkRpcGo, map[string]*bintree{}},
		"rpc_test.go": &bintree{sdkRpc_testGo, map[string]*bintree{}},
	}},
}}
